<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://ws.apache.org/ns/synapse">
    <registry provider="org.wso2.carbon.mediation.registry.WSO2Registry">
        <parameter name="cachableDuration">15000</parameter>
    </registry>
    <taskManager provider="org.wso2.micro.integrator.mediation.ntask.NTaskTaskManager"/>
    <proxy name="acceptProxy" startOnLoad="true" transports="https http">
        <description/>
        <target>
            <inSequence>
                <log level="custom">
                    <property expression="$body" name="Entered SOAP Endpoint"/>
                </log>
                <property name="FORCE_ERROR_ON_SOAP_FAULT"
                          scope="default" type="STRING" value="true"/>
                <sequence key="injectingSeq"/>
                <respond description="Reply back"/>
            </inSequence>
            <outSequence/>
            <faultSequence/>
        </target>
    </proxy>
    <sequence name="injectingSeq">
        <log>
            <property name="INJECTING_SEQ" value="injectingSeq"/>
        </log>
        <log level="custom">
            <property name="injectingSeq" value="Calling template process_data"/>
        </log>
        <call-template target="process_data"/>
        <log level="custom">
            <property name="injectingSeq" value="After calling template process_data"/>
        </log>
    </sequence>
    <sequence name="fault">
        <!-- Log the message at the full log level with the ERROR_MESSAGE and the ERROR_CODE-->
        <log level="full">
            <property name="MESSAGE" value="Executing default 'fault' sequence"/>
            <property expression="get-property('ERROR_CODE')" name="ERROR_CODE"/>
            <property expression="get-property('ERROR_MESSAGE')" name="ERROR_MESSAGE"/>
        </log>
        <!-- Drops the messages by default if there is a fault -->
        <drop/>
    </sequence>
    <sequence name="main">
        <in>
            <!-- Log all messages passing through -->
            <log level="full"/>
            <!-- ensure that the default configuration only sends if it is one of samples -->
            <!-- Otherwise Synapse would be an open proxy by default (BAD!)               -->
            <filter regex="http://localhost:9000.*" source="get-property('To')">
                <!-- Send the messages where they have been sent (i.e. implicit "To" EPR) -->
                <send/>
            </filter>
        </in>
        <out>
            <send/>
        </out>
        <description>The main sequence for the message mediation</description>
    </sequence>
    <template name="memeber_info_log_template">
        <parameter name="id"/>
        <parameter name="name"/>
        <parameter name="company"/>
        <sequence>
            <log level="custom">
                <property name="memeber_info_log_template" value="Start of Template!"/>
            </log>
            <property expression="$func:id" name="id" scope="default"
                      type="STRING" xmlns:ns="http://org.apache.synapse/xsd"
                      xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
            <property expression="$func:name" name="name"
                      scope="default" type="STRING"
                      xmlns:ns="http://org.apache.synapse/xsd"
                      xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
            <property expression="$func:company" name="company"
                      scope="default" type="STRING"
                      xmlns:ns="http://org.apache.synapse/xsd"
                      xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
            <log level="custom">
                <property name="memeber_info_log_template" value="values passed to template"/>
                <property expression="get-property('id')"
                          name="carrierId"
                          xmlns:ns="http://org.apache.synapse/xsd"
                          xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
                <property expression="get-property('name')"
                          name="accountId"
                          xmlns:ns="http://org.apache.synapse/xsd"
                          xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
                <property expression="get-property('company')"
                          name="groupId"
                          xmlns:ns="http://org.apache.synapse/xsd"
                          xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
            </log>
            <log level="custom">
                <property name="memeber_info_log_template" value="End of Template!"/>
            </log>
        </sequence>
    </template>
    <template name="process_data">
        <sequence>
            <call-template target="request_generate_template"/>
            <log level="custom">
                <property name="process_data" value="generated member info"/>
                <property expression="$body" name="body"
                          xmlns:ns="http://org.apache.synapse/xsd"
                          xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope"/>
            </log>
            <log level="custom">
                <property name="process_data" value="Start of loop to process Members"/>
            </log>
            <foreach expression="//data//member"
                     xmlns:ns="http://org.apache.synapse/xsd"
                     xmlns:ns2="http://org.apache.synapse/xsd" xmlns:soapenv="http://www.w3.org/2003/05/soap-envelope">
                <sequence>
                    <property expression="//id" name="id"
                              scope="default" type="STRING"/>
                    <property expression="//name" name="name"
                              scope="default" type="STRING"/>
                    <property expression="//company" name="company"
                              scope="default" type="STRING"/>
                    <log level="custom">
                        <property name="process_data" value="Before calling memeber_info_log_template"/>
                        <property expression="get-property('id')" name="id"/>
                        <property expression="get-property('name')" name="name"/>
                        <property expression="get-property('company')" name="company"/>
                    </log>
                    <call-template target="memeber_info_log_template">
                        <with-param name="carrierId" value="{get-property('id')}"/>
                        <with-param name="accountId" value="{get-property('name')}"/>
                        <with-param name="groupId" value="{get-property('company')}"/>
                    </call-template>
                    <log level="custom">
                        <property name="process_data" value="After calling memeber_info_log_template"/>
                    </log>
                </sequence>
            </foreach>
            <log level="custom">
                <property name="process_data" value="End of looping to process Members"/>
            </log>
        </sequence>
    </template>
    <template name="request_generate_template">
        <sequence>
            <call>
                <endpoint>
                    <http uri-template="http://localhost:8280/members"/>
                </endpoint>
            </call>
        </sequence>
    </template>
    <api context="/members" name="member-api">
        <resource methods="POST GET">
            <inSequence>
                <payloadFactory media-type="xml">
                    <format>
                        <data xmlns="">
                            <member>
                                <id>1000</id>
                                <name>john</name>
                                <company>wso2</company>
                            </member>
                            <member>
                                <id>1001</id>
                                <name>smith</name>
                                <company>IBM</company>
                            </member>
                            <member>
                                <id>1002</id>
                                <name>tom</name>
                                <company>Google</company>
                            </member>
                        </data>
                    </format>
                    <args/>
                </payloadFactory>
                <respond/>
            </inSequence>
        </resource>
    </api>
    <!-- You can add any flat sequences, endpoints, etc.. to this synapse.xml file if you do
    *not* want to keep the artifacts in several files -->
</definitions>